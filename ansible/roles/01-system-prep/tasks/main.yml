---
- debug:
    var: zfsprep_root_disks_by_id
- debug:
    var: zfsprep_target_disks
- name: ensure live system has necessary packages installed
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - mdadm
    - debootstrap
    - gdisk
    - zfs-initramfs
- name: forcibly zap disks
  shell: "mdadm --zero-superblock --force {{ item }} && sgdisk --zap-all {{ item }}"
  with_items:
    - "{{ zfsprep_target_disks }}"
  when: (zfsprep_zap_disks == true)
- name: partition our root disks (boot partitions)
  shell: "sgdisk -a1 -n2:34:2047 -t2:EF02 {{ item }} && sgdisk -n3:1M:+512M -t3:EF00 {{ item }}"
  with_items:
    - "{{ zfsprep_legacy_device_nodes | ternary((zfsprep_root_disks | map('regex_replace', '(.*)', '/dev/\\g<1>') | list), zfsprep_root_disks_by_id) }}"
- name: partition our root disks (LUKS)
  shell: "sgdisk -n4:0:+512M -t4:8300 {{ item }} && sgdisk -n1:0:0 -t1:8300 {{ item }}"
  with_items:
    - "{{ zfsprep_legacy_device_nodes | ternary((zfsprep_root_disks | map('regex_replace', '(.*)', '/dev/\\g<1>') | list), zfsprep_root_disks_by_id) }}"
  when: (zfsprep_luks == true)
- name: partition our root disks (unencrypted)
  shell: "sgdisk -n1:0:0 -t1:BF01 {{ item }}"
  with_items:
    - "{{ zfsprep_legacy_device_nodes | ternary((zfsprep_root_disks | map('regex_replace', '(.*)', '/dev/\\g<1>') | list), zfsprep_root_disks_by_id) }}"
  when: (zfsprep_luks != true)
- name: create root zpool
  shell: "zpool create {{ zfsprep_root_pool_opts | join(' ') }} {{ zfsprep_root_pool }} {{ zfsprep_root_pool_type }} {{ zfsprep_legacy_device_nodes | ternary((zfsprep_root_disks | map('regex_replace', '(.*)', '/dev/\\g<1>') | list), zfsprep_root_disks_by_id) | map('regex_replace', '(.*)', '\\g<1>' + zfsprep_root_part_append) | list | join(' ') }}"
- name: create root dataset
  zfs:
    name: "{{ zfsprep_root_pool }}/ROOT"
    state: present
    extra_zfs_properties:
      canmount: off
      mountpoint: none
- name: create root fs
  zfs:
    name: "{{ zfsprep_root_pool }}/ROOT/ubuntu"
    state: present
    extra_zfs_properties:
      canmount: noauto
      mountpoint: /
- name: manually mount rpool/ROOT/ubuntu before creating other mountpoints
  shell: "zfs mount {{ zfsprep_root_pool }}/ROOT/ubuntu"
- name: create mountpoints in root pool
  zfs:
    name: "{{ item.name }}"
    state: present
    extra_zfs_properties:
      "{{ item.properties }}"
  with_items:
    - "{{ zfsprep_root_volumes }}"
- name: chmod 01777 /mnt/var/tmp
  file:
    path: /mnt/var/tmp
    mode: 01777
- name: create data zpool
  shell: "zpool create {{ zfsprep_data_pool_opts | join(' ') }} {{ zfsprep_data_pool }} {{ zfsprep_data_pool_type }} {{ zfsprep_legacy_device_nodes | ternary((zfsprep_data_disks | map('regex_replace', '(.*)', '/dev/\\g<1>') | list), zfsprep_data_disks_by_id) | join(' ') }}"
- name: create data dataset
  zfs:
    name: "{{ zfsprep_data_pool }}/data"
    state: present
    extra_zfs_properties:
      mountpoint: /data
- name: run debootstrap and set devices=off
  shell: "debootstrap {{ zfsprep_ubuntu_release }} /mnt && zfs set devices=off {{ zfsprep_root_pool }} && zfs set devices=off {{ zfsprep_data_pool }}"
- name: write /etc/hostname in chroot
  copy:
    content: "{{ zfsprep_hostname.short }}"
    dest: /mnt/etc/hostname
- name: write /etc/apt/sources.list in chroot
  template:
    src: sources.j2
    dest: /mnt/etc/apt/sources.list
- name: add hostname entries to /etc/hosts in chroot
  lineinfile:
    line: "127.0.0.1 {{ zfsprep_hostname.short }} {{ zfsprep_hostname.long }}"
    path: /mnt/etc/hosts
    state: present
    insertbefore: BOF
- name: mount special filesystems for chroot
  shell: "{{ item }}"
  with_items:
    - mount --rbind /dev /mnt/dev
    - mount --rbind /proc /mnt/proc
    - mount --rbind /sys /mnt/sys
